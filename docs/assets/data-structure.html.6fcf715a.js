import{_ as l,r as c,o as u,c as i,a,w as t,b as n,d as s,e as o}from"./app.4df775b2.js";var k="/myNotes/img/docs/graph1.png",r="/myNotes/img/docs/tree.png",d="/myNotes/img/docs/graph2.png",m="/myNotes/img/docs/graph3-1.png",b="/myNotes/img/docs/graph3-2.png",v="/myNotes/img/docs/graph4.png";const y={},g=n("h2",{id:"\u5716-graph-\u554F\u984C",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5716-graph-\u554F\u984C","aria-hidden":"true"},"#"),s(" \u5716(Graph) \u554F\u984C")],-1),w=n("h3",{id:"\u984C\u76EE",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u984C\u76EE","aria-hidden":"true"},"#"),s(" \u984C\u76EE")],-1),h=n("blockquote",null,[n("p",null,[s("\u8ACB\u6839\u64DA\u6240\u8F38\u5165\u7684\u5716\u5167\u5BB9\uFF0C\u627E\u51FA\u5716\u4E0A"),n("strong",null,"\u6700\u591A"),s("\u7684\u7BC0\u9EDE\u7D44\u5408\uFF0C\u4F7F\u5F97\u6B64\u7D44\u5408\u5167\u7684\u4EFB\u5169\u9EDE\u5728\u5716\u4E0A\u6C92\u6709\u5171\u7528\u908A\u5B58\u5728\uFF0C\u4E26\u5370\u51FA\u6B64\u7D44\u5408\u6240\u5305\u542B\u7684\u7BC0\u9EDE\u500B\u6578\u3002\u6B64\u7A0B\u5F0F\u9700\u80FD\u4E0D\u65B7\u5730\u8B80\u5165\u5716\u5167\u5BB9\uFF0C\u4E26\u6839\u64DA\u5716\u5167\u5BB9\u5370\u51FA\u6700\u591A\u7D44\u5408\u7684\u7BC0\u9EDE\u500B\u6578\u3002")])],-1),f=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"9"),s(),n("span",{class:"token comment"},"// \u7BC0\u9EDE\u6578\u91CF"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"// \u9130\u63A5\u77E9\u9663 adjacency matrix"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"4"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=o('<blockquote><p><img src="'+k+`" alt="graph1"> \u7576\u6211\u5011\u9078\u64C7\u7BC0\u9EDE 0\u3001\u7BC0\u9EDE 4\u3001\u7BC0\u9EDE 6\u3001\u7BC0\u9EDE 7 \u6642\uFF0C\u6B64\u6642\u6709\u6700\u591A\u7684\u7D44\u5408\uFF0C<br> \u6B64\u7D44\u5408\u6240\u5305\u542B\u7684\u7BC0\u9EDE\u500B\u6578\u70BA 4\uFF0C\u4E14\u5747\u6C92\u6709\u5171\u7528\u908A\u5B58\u5728</p></blockquote><h3 id="\u7A0B\u5F0F\u78BC" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span> max <span class="token operator">&gt;</span> min <span class="token operator">?</span> max <span class="token operator">:</span> min</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span>graph<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>visited<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>it<span class="token punctuation">)</span> <span class="token operator">!=</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">!=</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> point<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> node<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span>graph<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> neighbor<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">bool</span> tmp<span class="token punctuation">;</span>
                cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> neighbor<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            graph<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> Max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="\u8FF7\u5BAE\u554F\u984C" tabindex="-1"><a class="header-anchor" href="#\u8FF7\u5BAE\u554F\u984C" aria-hidden="true">#</a> \u8FF7\u5BAE\u554F\u984C</h2><h3 id="\u984C\u76EE-1" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-1" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u6839\u64DA\u6240\u8F38\u5165\u7684\u8FF7\u5BAE\u5167\u5BB9(\u5305\u62EC\u8FF7\u5BAE\u5C64\u6578\u3001\u5927\u5C0F\u3001\u8FF7\u5BAE\u5716\u3001\u4E00\u8D77\u59CB\u9EDE\u4EE5\u53CA\u4E00\u7D42\u9EDE)\uFF0C \u8ACB\u986F\u793A\u6240\u6709\u6709\u53EF\u80FD\u7684\u8DEF\u5F91(simple paths)\u6578\u76EE(\u53EF\u5F80\u4E0A\u3001\u4E0B\u3001\u5DE6\u6216\u53F3\u65B9\u5411\u8D70\u8A2A\uFF0C\u4EE5 \u53CA\u5F80\u4E0A\u4E0B\u5C64\u79FB\u52D5)\uFF0C\u6B64\u7A0B\u5F0F\u9700\u80FD\u4E0D\u65B7\u8F38\u5165\u8FF7\u5BAE\u5167\u5BB9\uFF0C\u4E26\u986F\u793A\u5176\u6240\u6709\u6709\u53EF\u80FD\u7684\u8DEF\u5F91 \u6578\u76EE\uFF0C\u76F4\u5230\u8F38\u5165\u7684\u8FF7\u5BAE\u5927\u5C0F\u908A\u9577\u5C0F\u65BC\u6216\u7B49\u65BC 0\u3002 PS. Simple path \u70BA\u4E00\u8DEF\u5F91\uFF0C\u4E14\u8DEF\u5F91\u4E2D\u7684\u7BC0\u9EDE\u4E0D\u6703\u91CD\u8907\u3002</p></blockquote>`,7),z=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"6"),s(),n("span",{class:"token number"},"7"),s(),n("span",{class:"token comment"},"// 3 \u5C64 6X7 \u7684\u8FF7\u5BAE"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token comment"},"// 1 \u4EE3\u8868\u969C\u7919\uFF0C\u4E0D\u80FD\u8D70\u904E\u53BB\uFF0C0 \u4EE3\u8868\u53EF\u901A\u884C"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token comment"},"// \u8D77\u59CB\u9EDE(\u5C64 \u5217 \u884C)"),s(`
`),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token comment"},"// \u7D42\u9EDE(\u5C64 \u5217 \u884C)"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"// \u4EE3\u8868\u4E0D\u518D\u8F38\u5165\u5176\u4ED6\u8FF7\u5BAE\uFF0C\u7A0B\u5F0F\u7D50\u675F"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"1"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// \u6709\u53EF\u80FD\u7684\u8DEF\u5F91\u5982\u4E0B\u6240\u793A(\u4E0D\u9808\u5217\u5370)\uFF1A"),s(`
`),n("span",{class:"token comment"},"//  * \u4EE3\u8868\u53EF\u884C\u8D70\u4E4B\u8DEF\u5F91\u4F4D\u7F6E\uFF0C S \u4EE3\u8868\u8D77\u9EDE\uFF0C D \u4EE3\u8868\u7D42\u9EDE\u3002"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token comment"},"// 1 \u4EE3\u8868\u969C\u7919\uFF0C\u4E0D\u80FD\u8D70\u904E\u53BB\uFF0C0 \u4EE3\u8868\u53EF\u901A\u884C"),s(`
`),n("span",{class:"token number"},"1"),s(" S "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`

`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`

`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(" D "),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=o(`<h3 id="\u7A0B\u5F0F\u78BC-1" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC-1" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> layer<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Point move<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// \u4E0A \u4E0B \u5DE6 \u53F3 \u4E0B\u5C64 \u4E0A\u5C64</span>

<span class="token keyword">int</span> Layer<span class="token punctuation">,</span> Row<span class="token punctuation">,</span> Col<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">isvalid</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maze<span class="token punctuation">,</span> Point pos<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5224\u65B7\u4F4D\u7F6E\u662F\u5426\u5408\u6CD5</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>layer <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos<span class="token punctuation">.</span>layer <span class="token operator">&gt;=</span> Layer <span class="token operator">||</span> pos<span class="token punctuation">.</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos<span class="token punctuation">.</span>row <span class="token operator">&gt;=</span> Row <span class="token operator">||</span> pos<span class="token punctuation">.</span>col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos<span class="token punctuation">.</span>col <span class="token operator">&gt;=</span> Col<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u8D85\u51FA\u7BC4\u570D</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>maze<span class="token punctuation">[</span>pos<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u4EE5\u62DC\u8A2A\u904E\u6216\u969C\u7919\u7269</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maze<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> Layer<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> Row<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> z <span class="token operator">&lt;</span> Col<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				cout <span class="token operator">&lt;&lt;</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maze<span class="token punctuation">,</span> Point pos<span class="token punctuation">,</span> Point end<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u905E\u8FF4\u641C\u7D22\u8FF7\u5BAE</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token punctuation">.</span>layer <span class="token operator">==</span> end<span class="token punctuation">.</span>layer <span class="token operator">&amp;&amp;</span> pos<span class="token punctuation">.</span>row <span class="token operator">==</span> end<span class="token punctuation">.</span>row <span class="token operator">&amp;&amp;</span> pos<span class="token punctuation">.</span>col <span class="token operator">==</span> end<span class="token punctuation">.</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5230\u9054\u51FA\u53E3</span>
		path<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token comment">//print(maze);</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5617\u8A66\u54116\u500B\u65B9\u5411\u79FB\u52D5</span>

		Point nextpos <span class="token operator">=</span> <span class="token punctuation">{</span> pos<span class="token punctuation">.</span>layer <span class="token operator">+</span> <span class="token double-colon punctuation">::</span>move<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>layer<span class="token punctuation">,</span> pos<span class="token punctuation">.</span>row <span class="token operator">+</span> <span class="token double-colon punctuation">::</span>move<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">,</span> pos<span class="token punctuation">.</span>col <span class="token operator">+</span> <span class="token double-colon punctuation">::</span>move<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>col <span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isvalid</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> nextpos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5982\u679C\u65B0\u4F4D\u7F6E\u5408\u6CD5 \u5C31\u7E7C\u7E8C\u905E\u8FF4\u641C\u7D22</span>
			maze<span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u6A19\u8A18\u70BA\u5DF2\u62DC\u8A2A</span>
			<span class="token comment">//print(maze);</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> nextpos<span class="token punctuation">,</span> end<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
			maze<span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>nextpos<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u6062\u5FA9\u70BA\u672A\u62DC\u8A2A</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> Layer <span class="token operator">&gt;&gt;</span> Row <span class="token operator">&gt;&gt;</span> Col<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>Layer <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Row <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Col <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

		vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">maze</span><span class="token punctuation">(</span>Layer<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>Row<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> Layer<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> Row<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> z <span class="token operator">&lt;</span> Col<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					cin <span class="token operator">&gt;&gt;</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		Point Start<span class="token punctuation">,</span> End<span class="token punctuation">;</span>
		cin <span class="token operator">&gt;&gt;</span> Start<span class="token punctuation">.</span>layer <span class="token operator">&gt;&gt;</span> Start<span class="token punctuation">.</span>row <span class="token operator">&gt;&gt;</span> Start<span class="token punctuation">.</span>col<span class="token punctuation">;</span>
		cin <span class="token operator">&gt;&gt;</span> End<span class="token punctuation">.</span>layer <span class="token operator">&gt;&gt;</span> End<span class="token punctuation">.</span>row <span class="token operator">&gt;&gt;</span> End<span class="token punctuation">.</span>col<span class="token punctuation">;</span>
		Start<span class="token punctuation">.</span>layer<span class="token operator">--</span><span class="token punctuation">;</span>
		End<span class="token punctuation">.</span>layer<span class="token operator">--</span><span class="token punctuation">;</span>

		<span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// \u8A08\u6578\u5668   </span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>maze<span class="token punctuation">[</span>Start<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>Start<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>Start<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> maze<span class="token punctuation">[</span>End<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>End<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>End<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			maze<span class="token punctuation">[</span>Start<span class="token punctuation">.</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span>Start<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>Start<span class="token punctuation">.</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">;</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		cout <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="\u93C8\u7D50\u4E32\u5217-\u4E8C\u5143\u6A39" tabindex="-1"><a class="header-anchor" href="#\u93C8\u7D50\u4E32\u5217-\u4E8C\u5143\u6A39" aria-hidden="true">#</a> \u93C8\u7D50\u4E32\u5217 - \u4E8C\u5143\u6A39</h2><h3 id="\u984C\u76EE-2" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-2" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u8A2D\u8A08\u4E00\u7A0B\u5F0F\uFF0C\u6B64\u7A0B\u5F0F\u53EF\u4EE5\u4E0D\u65B7\u5730\u8F38\u5165\u591A\u7D44\u6E2C\u8A66\u8CC7\u6599\uFF0C\u6BCF\u7D44\u6E2C\u8A66\u8CC7\u6599\u70BA\u82E5\u5E72\u7BC0\u9EDE\u7684\u96C6\u5408\uFF0C\u5404\u7BC0\u9EDE\u9593\u4EE5 white space (\u7A7A\u767D\u5B57\u5143)\u5206\u9694\uFF0C\u6BCF\u7D44\u6E2C\u8A66\u8CC7\u6599\u6700\u5F8C\u4EE5\u201D()\u201D\u4EE3\u8868\u8A72\u7D44\u6E2C\u8A66\u8CC7\u6599\u7684\u7D50\u675F\u3002\u6B64\u7A0B\u5F0F\u6301\u7E8C\u8F38\u5165\u8CC7\u6599\u76F4\u5230\u6E2C\u8A66\u8CC7\u6599\u4E0D\u5305\u62EC\u4EFB\u4F55\u7BC0\u9EDE\u8CC7\u6599\u70BA\u6B62(\u5373\u53EA\u6709\u201D()\u201D)\u3002\u8ACB\u6839\u64DA\u5404\u7D44\u6E2C\u8A66\u8CC7\u6599\u5224\u65B7\u662F\u5426\u53EF\u4EE5\u69CB\u6210\u4E00\u68F5\u4E8C\u5143\u6A39\uFF0C\u5982\u679C\u8F38\u5165\u7684\u5404\u7D44\u6E2C\u8A66\u8CC7\u6599\u53EF\u4EE5\u69CB\u6210\u4E00\u500B\u4E8C\u5143\u6A39\u7684\u8A71\uFF0C\u8ACB\u8F38\u51FA\u6B64\u4E8C\u5143\u6A39<strong>\u5F8C\u5E8F\u8D70\u8A2A</strong>\u5F8C\u7684\u7D50\u679C\uFF0C\u5982\u679C\u8F38\u5165\u7684\u7BC0\u9EDE\u7121\u6CD5\u5408\u7406\u69CB\u6210\u4E00\u500B\u4E8C\u5143\u6A39\u7684\u8A71\uFF0C\u8ACB\u8F38\u51FA wrong data\u3002</p></blockquote><h4 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h4>`,7),Q=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"11"),n("span",{class:"token punctuation"},","),s("LL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},","),s("LLL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s("LLL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),s("R"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s("R"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s("L"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13"),n("span",{class:"token punctuation"},","),s("LR"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"11"),n("span",{class:"token punctuation"},","),s("LL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),s("R"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s("RL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},","),s("RR"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[s("wrong data "),n("span",{class:"token comment"},"// \u7531\u65BC\u8F38\u5165\u8CC7\u6599\u6709\u554F\u984C\uFF0C\u56E0\u6B64\u8F38\u51FA wrong data"),s(`
`),n("span",{class:"token number"},"11"),s(),n("span",{class:"token number"},"13"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"7"),s(),n("span",{class:"token number"},"8"),s(),n("span",{class:"token number"},"5"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=o('<p>\u6BCF\u500B\u62EC\u865F\u70BA\u4E00\u7BC0\u9EDE\u8CC7\u8A0A\uFF0C\u5373 (\u7BC0\u9EDE\u6578\u503C,\u4F4D\u7F6E)\uFF0C\u4F4D\u7F6E\u4EE5\u6839\u7BC0\u9EDE(root)\u958B\u59CB\u8A08\u7B97\uFF0CR\u70BA\u524D\u5F80\u53F3\u5B50\u7BC0\u9EDE\uFF0CL\u70BA\u524D\u5F80\u5DE6\u5B50\u7BC0\u9EDE</p><blockquote><p><img src="'+r+`" alt="tree"></p></blockquote><h3 id="\u7A0B\u5F0F\u78BC-2" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC-2" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">tree</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	tree<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span> right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span>tree<span class="token operator">*</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5F8C\u5E8F\u8D70\u8A2A</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>	
		temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">deleteTree</span><span class="token punctuation">(</span>tree<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">deleteTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">deleteTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">delete</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">splitstring</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> sentense<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> tokens<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5206\u5272\u5B57\u4E32</span>
	string<span class="token double-colon punctuation">::</span>size_type pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">;</span>
	pos2 <span class="token operator">=</span> sentense<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pos1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> pos2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pos2 <span class="token operator">!=</span> pos1<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token punctuation">,</span> pos2 <span class="token operator">-</span> pos1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pos1 <span class="token operator">=</span> pos2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		pos2 <span class="token operator">=</span> sentense<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos1 <span class="token operator">!=</span> sentense<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">list</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> tree<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tree<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">char</span> Dir<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;\\0&quot;</span><span class="token punctuation">;</span>
		<span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;(%d,%[^)]s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

		node <span class="token operator">=</span> root<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Dir<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>
					node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
				node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>
					node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
				node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>	
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>id <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		node<span class="token operator">-&gt;</span>id <span class="token operator">=</span> ID<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		string sentense<span class="token punctuation">;</span>
		<span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> sentense<span class="token punctuation">)</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">tokens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">splitstring</span><span class="token punctuation">(</span>sentense<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

		tree<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
		<span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">;</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> <span class="token function">find</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;wrong data&quot;</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

		<span class="token function">deleteTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="\u7DB2\u8DEF\u4E2D\u5FC3" tabindex="-1"><a class="header-anchor" href="#\u7DB2\u8DEF\u4E2D\u5FC3" aria-hidden="true">#</a> \u7DB2\u8DEF\u4E2D\u5FC3</h2><h3 id="\u984C\u76EE-3" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-3" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u8A2D\u8A08\u4E00\u7A0B\u5F0F\uFF0C\u6B64\u7A0B\u5F0F\u53EF\u4EE5\u4E0D\u65B7\u5730\u8F38\u5165\u4E00\u7DB2\u8DEF\u8CC7\u8A0A\uFF0C\u5728\u6B64\u6211\u5011\u4F7F\u7528\u7DB2\u8DEF\u7BC0\u9EDE\u500B\u6578n \u4EE5\u53CA\u4E00\u5716 G(V,E)\u4F86\u4EE3\u8868\u4E00\u500B\u7DB2\u8DEF\uFF0C\u6B64\u5716 G(V,E)\u4F7F\u7528 adjacency matrix \u4F86\u8868\u793A\uFF0C \u7576\u8F38\u5165\u7684\u7DB2\u8DEF\u7BC0\u9EDE\u500B\u6578n\u22660\u6642\u5247\u7A0B\u5F0F\u7D50\u675F\u3002\u5716\u4E0A\u7684\u7BC0\u9EDE u \u2208 V \u4EE3\u8868\u7DB2\u8DEF\u7BC0\u9EDEu\uFF0C\u5716\u4E0A\u7684\u7DDA (u, v) \u5247\u4EE3\u8868\u7BC0\u9EDE u \u8207\u7BC0\u9EDE v \u4E4B\u9593\u53EF\u4E92\u76F8\u6E9D\u901A\uFF0C\u7BC0\u9EDE u \u5230\u7BC0\u9EDE v\u7684\u8E8D\u8DDD\u6578(\u4EE5 hop(u, v) \u4F86\u8868\u793A\u4E4B)\u5728\u6B64\u5B9A\u7FA9\u70BA\u5716\u4E0A\u7BC0\u9EDE u\u81F3\u5C11\u9700\u8981\u7D93\u904E\u591A\u5C11\u689D\u7DDA\u624D\u53EF\u5230\u9054\u7BC0\u9EDE v \u3002\u5C0D\u6BCF\u4E00\u500B\u7BC0\u9EDE u \u800C\u8A00\uFF0C\u6B64\u7BC0\u9EDE u \u5230\u7DB2\u8DEF\u4E2D\u5176\u4ED6\u7BC0\u9EDE v \u7684\u6700\u9577\u8E8D\u8DDD\u6578\u53EF\u4EE5\u7528max hop(u, v)\u4F86\u8868\u793A\uFF0C\u7576\u4E00\u500B\u7BC0\u9EDE x \u88AB\u7A31\u4F5C\u662F\u7DB2\u8DEF\u4E2D\u5FC3\u6642\uFF0C\u6B64\u7BC0\u9EDE\u7684 max hop(x, v) \u8981 \u5C0F \u65BC \u6216 \u7B49 \u65BC \u5176 \u4ED6 \u7BC0 \u9EDE y \u7684 max hop(y, v) \uFF0C \u5373max hop(x, v) \u2266 max hop(y, v) for all y \u2208 V\u3002\u82E5\u8F38\u5165\u7684\u7DB2\u8DEF\u70BA\u4E00\u9023\u901A\u7DB2\u8DEF\u6642\uFF0C\u8ACB\u5370\u51FA\u6B64\u5716\u7684\u7DB2\u8DEF\u4E2D\u5FC3\u7BC0\u9EDE(\u53EF\u80FD\u4E0D\u53EA\u4E00\u500B\u9EDE\uFF0C\u8ACB\u4F9D\u7167\u7BC0\u9EDE\u7DE8\u865F\u7531\u5C0F\u5230\u5927\u6392\u597D)\uFF0C\u82E5\u8F38\u5165\u7684\u7DB2\u8DEF\u4E0D\u662F\u4E00\u500B\u9023\u901A\u7DB2\u8DEF\u6642(\u5373\u5C0D\u65BC\u7DB2\u8DEF\u4E2D\u4EFB\u5169\u500B\u7BC0\u9EDE u, v \u800C\u8A00\uFF0C\u5169\u7BC0\u9EDE\u4E4B\u9593\u4E0D\u5B58\u5728\u4E00\u9023\u901A\u8DEF\u5F91)\uFF0C\u8ACB\u5370\u51FA\u201Ddisconnected\u201D\u3002</p></blockquote><h4 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-1" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-1" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h4>`,8),M=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"8"),s(),n("span",{class:"token comment"},"//\u6B64\u884C\u7684 8 \u4EE3\u8868\u7B2C\u4E00\u5F35\u5716\u4E0A\u6709 8 \u500B\u9EDE"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token comment"},"//\u6B64 adjacency matrix \u4EE3\u8868\u9EDE\u548C\u9EDE\u4E4B\u9593\u6709\u7121\u908A\u95DC\u4FC2\u5B58\u5728"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"9"),s(),n("span",{class:"token comment"},"//\u6B64\u884C\u7684 9 \u4EE3\u8868\u7B2C\u4E8C\u5F35\u5716\u4E0A\u6709 9 \u500B\u9EDE"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"// \u7DB2\u8DEF\u7BC0\u9EDE\u500B\u6578 n\u22660 \u6642\u5247\u7A0B\u5F0F\u7D50\u675F"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[s(`disconnected
`),n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"4"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=o('<blockquote><p><img src="'+d+`" alt="graph2"></p></blockquote><h3 id="\u7A0B\u5F0F\u78BC-3" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC-3" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">Queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">distance</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>
	visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u9084\u6709\u6771\u897F\u6642</span>
		<span class="token keyword">int</span> node <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5F80\u4E0B\u4E00\u500Bnode	</span>
		<span class="token comment">//cout &lt;&lt; node &lt;&lt; &#39; &#39;;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u7576\u524D\u7BC0\u9EDE\u7684\u6240\u6709\u9130\u5C45</span>
			<span class="token keyword">int</span> neighbor <span class="token operator">=</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u8A72\u7BC0\u9EDE\u6C92\u53BB\u904E\u6642</span>
				visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				distance<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// \u9130\u5C45\u96E2\u51FA\u767C\u9EDE\u7684\u8DDD\u96E2\u6BD4\u7576\u524D\u7BC0\u9EDE\u90FD\u591A\u4E00\u6B65</span>
				Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> neighbor<span class="token punctuation">;</span><span class="token comment">// \u628A\u8A72\u7BC0\u9EDE\u653E\u9032queue</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u6BCF\u500B\u7BC0\u9EDE\u90FD\u6709\u62DC\u8A2A\u904E</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>distance<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distance<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">*</span>it<span class="token punctuation">;</span> <span class="token comment">// \u56DE\u50B3\u6700\u5927\u503C</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> node_num<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> node_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">bool</span> neighbor<span class="token punctuation">;</span>
				cin <span class="token operator">&gt;&gt;</span> neighbor<span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		Queue <span class="token function">Q</span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">node_max_distance</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			node_max_distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> x<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> <span class="token function">min_element</span><span class="token punctuation">(</span>node_max_distance<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node_max_distance<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>node_max_distance<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node_max_distance<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> node_max_distance<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;disconnected&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>node_max_distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span>it<span class="token punctuation">)</span> 
					cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
			<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="\u5728\u5716\u4E2D\u627E\u4E00\u7279\u5225\u6A39\u554F\u984C" tabindex="-1"><a class="header-anchor" href="#\u5728\u5716\u4E2D\u627E\u4E00\u7279\u5225\u6A39\u554F\u984C" aria-hidden="true">#</a> \u5728\u5716\u4E2D\u627E\u4E00\u7279\u5225\u6A39\u554F\u984C</h2><h3 id="\u984C\u76EE-4" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-4" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u8A2D\u8A08\u4E00\u7A0B\u5F0F\uFF0C\u6B64\u7A0B\u5F0F\u53EF\u4EE5\u4E0D\u65B7\u5730\u8F38\u5165\u4E00\u7D44\u9023\u901A\u5716(connected graphs)\uFF0C\u6BCF\u4E00\u9023\u901A\u5716\u7686\u4F7F\u7528\u5716\u7BC0\u9EDE\u500B\u6578 n \u53CA\u76F8\u5C0D\u61C9\u7684 adjacency matrix A (n x n \u77E9\u9663)\u4F86\u8868\u793A\uFF0C\u7576\u8F38\u5165\u7684\u5716\u7BC0\u9EDE\u500B\u6578 n\u22660 \u6642\u5247\u7A0B\u5F0F\u7D50\u675F\u3002\u5728\u6BCF\u4E00\u500B adjacency matrix A \u4E2D\uFF0CA[i,j]=1\u5373\u8868\u793A\u7BC0\u9EDE i \u8207\u7BC0\u9EDE j \u6709\u76F8\u9130\u7684\u908A\uFF0CA[i,j]=0 \u5247\u8868\u793A\u7BC0\u9EDE i \u8207\u7BC0\u9EDE j \u4E4B\u9593\u6C92\u6709\u76F8\u9130\u7684\u908A\u3002\u8ACB\u5728\u5716\u4E2D\u627E\u5230\u4E00\u68F5\u6A39\uFF0C\u6B64\u6A39\u9700\u7D93\u904E\u6240\u6709\u5716\u4E2D\u7684\u7BC0\u9EDE\uFF0C\u4E14\u5728\u6B64\u6A39\u4E2D\u5206\u652F\u5EA6\u70BA1 \u7684\u7BC0\u9EDE\u7E3D\u6578\u76EE\u70BA\u6700\u591A(\u5728\u6A39\u4E2D\u5206\u652F\u5EA6\u70BA 1 \u7684\u7BC0\u9EDE\u4EE3\u8868\u6B64\u7BC0\u9EDE\u5728\u6A39\u4E2D\u53EA\u6709\u8DDF\u4E00\u500B\u6A39\u7BC0\u9EDE\u76F8\u9023)\uFF0C\u8ACB\u5217\u5370\u51FA\u6B64\u6A39\u5206\u652F\u5EA6\u70BA 1 \u7684\u7E3D\u7BC0\u9EDE\u500B\u6578\u3002</p></blockquote><h4 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-2" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-2" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h4>`,7),C=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"9"),s(),n("span",{class:"token comment"},"//\u6B64\u884C\u7684 9 \u4EE3\u8868\u7B2C\u4E8C\u5F35\u5716\u4E0A\u6709 9 \u500B\u9EDE"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"// \u5716\u7BC0\u9EDE\u500B\u6578 n\u22660 \u6642\u5247\u7A0B\u5F0F\u7D50\u675F"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"6"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),U=o('<blockquote><p><img src="'+m+'" alt="graph2"> \u5982\u4E0B\u6240\u793A\uFF0C\u6B64\u89E3\u64C1\u6709\u6700\u591A\u6A39\u5206\u652F\u5EA6\u70BA 1 \u7684\u7BC0\u9EDE\uFF0C\u5176\u5206\u652F\u5EA6\u70BA 1 \u7684\u7BC0\u9EDE\u7E3D\u6578\u70BA 6 <img src="'+b+`" alt="graph2"></p></blockquote><h3 id="\u7A0B\u5F0F\u78BC-4" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC-4" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>max<span class="token punctuation">,</span>min<span class="token punctuation">)</span> max <span class="token operator">&gt;</span> min <span class="token operator">?</span> max <span class="token operator">:</span> min</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">Queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> node1<span class="token punctuation">,</span> node2<span class="token punctuation">;</span>
	<span class="token function">Route</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span>  b<span class="token punctuation">)</span> <span class="token punctuation">{</span> node1 <span class="token operator">=</span> a<span class="token punctuation">,</span> node2 <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span>
	visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u9084\u6709\u6771\u897F\u6642</span>
		<span class="token keyword">int</span> node <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5F80\u4E0B\u4E00\u500Bnode	</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u7576\u524D\u7BC0\u9EDE\u7684\u6240\u6709\u9130\u5C45</span>
			<span class="token keyword">int</span> neighbor <span class="token operator">=</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u8A72\u7BC0\u9EDE\u6C92\u53BB\u904E\u6642</span>
				visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> neighbor<span class="token punctuation">;</span><span class="token comment">// \u628A\u8A72\u7BC0\u9EDE\u653E\u9032queue</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">==</span> visited<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// \u6BCF\u500B\u7BC0\u9EDE\u90FD\u6709\u62DC\u8A2A\u904E</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;&gt;</span> <span class="token function">get_Comb_Route</span><span class="token punctuation">(</span><span class="token keyword">int</span> node_num<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;&gt;</span> comb_route<span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mask</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> sel <span class="token operator">=</span> node_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u9078\u64C7\u7684\u7DDA\u6578\u91CF</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> route<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> sel<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// \u7DDA\u7684\u7E3D\u6578 - \u9078\u64C7\u7684\u7DDA\u6578\u91CF = \u4E0D\u8981\u7684\u7DDA\u6578\u91CF</span>
		mask<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token comment">// \u6392\u5217\u7D44\u5408</span>
		vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;</span> temp<span class="token punctuation">;</span><span class="token comment">// \u7D44\u5408\u904E\u7684\u5143\u7D20</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> route<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mask<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>route<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		comb_route<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>mask<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mask<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// \u5F80\u4E0B\u4E00\u500B\u7D44\u5408</span>

	<span class="token keyword">return</span> comb_route<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">Route_to_Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> node_num<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u7DDA\u8F49\u5716</span>
	vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> route<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		graph<span class="token punctuation">[</span>route<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>route<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		graph<span class="token punctuation">[</span>route<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>route<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> graph<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> node_num<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> node_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
				cin <span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;</span> route<span class="token punctuation">;</span><span class="token comment">// \u6240\u6709\u7684\u7DDA</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>
					route<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Route</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Route<span class="token operator">&gt;&gt;</span> comb_route <span class="token operator">=</span> <span class="token function">get_Comb_Route</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		Queue <span class="token function">Q</span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> comb_route<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> graph_temp <span class="token operator">=</span> <span class="token function">Route_to_Graph</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> comb_route<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> y<span class="token punctuation">,</span> graph_temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u78BA\u8A8D\u662F\u5426\u70BAtreee</span>
					<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> graph_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>graph_temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// \u9130\u5C45\u53EA\u67091\u500B\u7684\u7BC0\u9EDE</span>
					<span class="token punctuation">}</span>
					max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		cout <span class="token operator">&lt;&lt;</span> max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
			<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="\u5716\u8DEF\u5F91\u554F\u984C" tabindex="-1"><a class="header-anchor" href="#\u5716\u8DEF\u5F91\u554F\u984C" aria-hidden="true">#</a> \u5716\u8DEF\u5F91\u554F\u984C</h2><h3 id="\u984C\u76EE-5" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-5" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u8A2D\u8A08\u4E00\u7A0B\u5F0F\uFF0C\u6B64\u7A0B\u5F0F\u53EF\u4EE5\u4E0D\u65B7\u5730\u8F38\u5165\u4E00\u7D44\u5716(graph)\u53CA\u5716\u4E0A\u7684\u4E00\u500B\u7BC0\u9EDE s\uFF0C\u6BCF\u4E00\u5716\u7686\u4F7F\u7528\u5716\u7BC0\u9EDE\u500B\u6578 n \u53CA\u76F8\u5C0D\u61C9\u7684(n+1) x n \u4E8C\u7DAD\u9663\u5217\u4F86\u8868\u793A\uFF0C\u7576\u8F38\u5165\u7684\u5716\u7BC0\u9EDE\u500B\u6578 n\u22660 \u6642\u5247\u7A0B\u5F0F\u7D50\u675F\u3002\u5728\u6BCF\u4E00\u500B(n+1) x n \u4E8C\u7DAD\u9663\u5217\u4E2D\uFF0C\u5305\u542B\u4E86\u4E00\u500B\u7528\u4F86\u8868\u793A\u7BC0\u9EDE\u6B0A\u91CD\u7684\u4E00\u7DAD\u9663\u5217(\u5373 1 x n \u9663\u5217)\u4EE5\u53CA\u7528\u4F86\u8868\u793A\u908A\u95DC\u4FC2\u53CA\u908A\u4E0A\u6B0A\u91CD\u7684\u4E8C\u7DAD\u9663\u5217 A (\u5373 n x n \u9663\u5217)\u3002\u5176\u4E2D A[i, j] = w (w&gt;0) \u5373\u8868\u793A\u7BC0\u9EDE i \u8207\u7BC0\u9EDE j \u6709\u76F8\u9130\u7684\u908A\uFF0C\u4E14\u908A\u4E0A\u6B0A\u91CD\u70BA w\uFF0CA[i, j] = 0 \u5247\u8868\u793A\u7BC0\u9EDE i \u8207\u7BC0\u9EDE j \u4E4B\u9593\u6C92\u6709\u76F8\u9130\u7684\u908A\u3002\u7BC0\u9EDE s \u5247\u70BA\u4E00\u500B\u5927\u65BC\u7B49\u65BC 0 \u4F46\u5C0F\u65BC n \u7684\u503C\u3002\u4EE4 P(u, v)\u8868\u793A\u4E00\u689D\u5F9E\u7BC0\u9EDE u \u51FA\u767C\uFF0C\u7D93\u904E\u5176\u4ED6\u7BC0\u9EDE\uFF0C\u6700\u5F8C\u5230\u9054\u7BC0\u9EDE v \u7684\u8DEF\u5F91\u3002\u5247\u6211\u5011\u5B9A\u7FA9 P(u, v)\u7684\u7E3D\u6210\u672C\u70BA\u8DEF\u5F91\u4E0A\u6240\u7D93\u904E\u7BC0\u9EDE\u8207\u908A\u7684\u6B0A\u91CD\u503C\u7E3D\u548C(\u7BC0\u9EDE u \u53CA\u7BC0\u9EDE v \u7684\u6B0A\u91CD\u503C\u4E0D\u8A08\u7B97\u5728\u5167)\u3002\u8ACB\u6839\u64DA\u8F38\u5165\u7684\u7BC0\u9EDE s\uFF0C\u627E\u51FA\u5F9E\u7BC0\u9EDE s \u51FA\u767C\uFF0C\u5230\u6240\u6709\u5176\u4ED6\u7BC0\u9EDE\u7684\u6700\u5C0F\u8DEF\u5F91\u6B0A\u91CD\u503C\u7E3D\u548C\uFF0C\u4E26\u4F9D\u7167\u7BC0\u9EDE\u7684\u9806\u5E8F\u4F9D\u5E8F\u5217\u51FA\u5176\u6B0A\u91CD\u503C\uFF0C\u82E5\u6709\u7121\u6CD5\u5230\u9054\u7684\u7BC0\u9EDE\u6642\u5247\u5370\u51FA infinity\u3002</p></blockquote><h4 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-3" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-3" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h4>`,7),P=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"6"),s(),n("span",{class:"token comment"},"//\u6B64\u884C\u7684 6 \u4EE3\u8868\u7B2C\u4E00\u5F35\u5716\u4E0A\u6709 6 \u500B\u9EDE"),s(`
`),n("span",{class:"token number"},"5"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"7"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token comment"},"//\u7BC0\u9EDE 0 \u5230\u7BC0\u9EDE 5 \u7684\u6B0A\u91CD\u503C"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"2"),s(`
`),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"//\u6B64 6 x 6 matrix \u4EE3\u8868\u9EDE\u548C\u9EDE\u4E4B\u9593\u908A\u95DC\u4FC2\u4EE5\u53CA\u908A\u4E0A\u7684\u6B0A\u91CD\u503C"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"4"),s(`
`),n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token number"},"5"),s(),n("span",{class:"token comment"},"// \u7BC0\u9EDE s"),s(`
`),n("span",{class:"token number"},"0"),s(),n("span",{class:"token comment"},"// \u5716\u7BC0\u9EDE\u500B\u6578 n\u22660 \u6642\u5247\u7A0B\u5F0F\u7D50\u675F"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-cpp ext-cpp line-numbers-mode"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token number"},"2"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token number"},"8"),s(" infinity "),n("span",{class:"token number"},"4"),s(),n("span",{class:"token number"},"0"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),D=o('<blockquote><p><img src="'+v+`" alt="graph2"></p></blockquote><h3 id="\u7A0B\u5F0F\u78BC-5" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC-5" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC</h3><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNUM</span> <span class="token expression"><span class="token number">9999</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> weight<span class="token punctuation">,</span> <span class="token keyword">int</span> node_num<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">distance</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> MAXNUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
	vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> node<span class="token punctuation">;</span>

	distance<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// \u8D77\u59CB\u7BC0\u9EDE\u5230\u81EA\u8EAB\u7684\u8DDD\u96E2\u70BA 0</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> node_num<span class="token punctuation">)</span><span class="token comment">// \u9019\u500B\u8D77\u9EDE\u6C92\u6709\u9130\u5C45</span>
		<span class="token keyword">return</span> distance<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5C0B\u627E\u6700\u77ED\u8DEF\u5F91</span>
		<span class="token keyword">int</span> min <span class="token operator">=</span> MAXNUM<span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u524D\u5F80\u8DDD\u96E2\u6700\u77ED\u7684\u8DEF</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> distance<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u6C92\u62DC\u8A2A\u904E</span>
				min <span class="token operator">=</span> distance<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
				node <span class="token operator">=</span> y<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  \u66F4\u65B0\u6700\u77ED\u8DEF\u5F91\u8DDD\u96E2</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u70BA\u62DC\u8A2A\u904E\u4E14\u5B58\u5728\u8DEF\u5F91</span>
				<span class="token keyword">int</span> cost <span class="token operator">=</span> distance<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// \u5230\u76EE\u524D\u7BC0\u9EDE\u7684\u8DDD\u96E2+\u8DEF\u5F91\u6B0A\u91CD+\u7BC0\u9EDE\u6B0A\u91CD</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>cost <span class="token operator">&lt;</span> distance<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>
					distance<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u6263\u6389\u7D42\u9EDE\u7684\u6B0A\u91CD</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-=</span> distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> MAXNUM <span class="token operator">?</span> weight<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> distance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> node_num<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> node_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node_num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>node_num<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">weight</span><span class="token punctuation">(</span>node_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
			cin <span class="token operator">&gt;&gt;</span> weight<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
				cin <span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">int</span> s<span class="token punctuation">;</span>
		cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>

		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> distance <span class="token operator">=</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> node_num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node_num<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> MAXNUM<span class="token punctuation">)</span>
				cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;infinity &quot;</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>
				cout <span class="token operator">&lt;&lt;</span> distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,3);function G(V,I){const p=c("CodeGroupItem"),e=c("CodeGroup");return u(),i("div",null,[g,w,h,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[f]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[x]),_:1})]),_:1}),_,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[z]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[q]),_:1}),a(p,{title:"\u5099\u8A3B"},{default:t(()=>[L]),_:1})]),_:1}),R,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[Q]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[N]),_:1})]),_:1}),j,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[M]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[S]),_:1})]),_:1}),A,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[C]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[E]),_:1})]),_:1}),U,a(e,null,{default:t(()=>[a(p,{title:"\u8F38\u5165input",active:""},{default:t(()=>[P]),_:1}),a(p,{title:"\u8F38\u51FAoutput"},{default:t(()=>[X]),_:1})]),_:1}),D])}var B=l(y,[["render",G],["__file","data-structure.html.vue"]]);export{B as default};
