import{_ as n,o as s,c as a,e as t}from"./app.c98570ea.js";var p="/myNotes/img/docs/tree.png";const o={},e=t(`<h2 id="\u5716-graph-\u554F\u984C" tabindex="-1"><a class="header-anchor" href="#\u5716-graph-\u554F\u984C" aria-hidden="true">#</a> \u5716(Graph) \u554F\u984C</h2><h3 id="\u984C\u76EE" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u6839\u64DA\u6240\u8F38\u5165\u7684\u5716\u5167\u5BB9\uFF0C\u627E\u51FA\u5716\u4E0A<strong>\u6700\u591A</strong>\u7684\u7BC0\u9EDE\u7D44\u5408\uFF0C\u4F7F\u5F97\u6B64\u7D44\u5408\u5167\u7684\u4EFB\u5169\u9EDE\u5728\u5716\u4E0A\u6C92\u6709\u5171\u7528\u908A\u5B58\u5728\uFF0C\u4E26\u5370\u51FA\u6B64\u7D44\u5408\u6240\u5305\u542B\u7684\u7BC0\u9EDE\u500B\u6578\u3002\u6B64\u7A0B\u5F0F\u9700\u80FD\u4E0D\u65B7\u5730\u8B80\u5165\u5716\u5167\u5BB9\uFF0C\u4E26\u6839\u64DA\u5716\u5167\u5BB9\u5370\u51FA\u6700\u591A\u7D44\u5408\u7684\u7BC0\u9EDE\u500B\u6578\u3002</p></blockquote><h3 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token number">9</span> <span class="token comment">// \u7BC0\u9EDE\u6578\u91CF</span>
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token comment">// \u9130\u63A5\u77E9\u9663</span>
<span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u7A0B\u5F0F\u78BC\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC\u7BC4\u4F8B" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC\u7BC4\u4F8B</h4><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span> max <span class="token operator">&gt;</span> min <span class="token operator">?</span> max <span class="token operator">:</span> min</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span>graph<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>visited<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
    <span class="token keyword">bool</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>it<span class="token punctuation">)</span> <span class="token operator">!=</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">!=</span> point<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> point<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> graph<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> node<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span>graph<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> neighbor<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">bool</span> tmp<span class="token punctuation">;</span>
                cin <span class="token operator">&gt;&gt;</span> tmp<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> neighbor<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            graph<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> Max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="\u93C8\u7D50\u4E32\u5217-\u4E8C\u5143\u6A39" tabindex="-1"><a class="header-anchor" href="#\u93C8\u7D50\u4E32\u5217-\u4E8C\u5143\u6A39" aria-hidden="true">#</a> \u93C8\u7D50\u4E32\u5217 - \u4E8C\u5143\u6A39</h2><h3 id="\u984C\u76EE-1" tabindex="-1"><a class="header-anchor" href="#\u984C\u76EE-1" aria-hidden="true">#</a> \u984C\u76EE</h3><blockquote><p>\u8ACB\u8A2D\u8A08\u4E00\u7A0B\u5F0F\uFF0C\u6B64\u7A0B\u5F0F\u53EF\u4EE5\u4E0D\u65B7\u5730\u8F38\u5165\u591A\u7D44\u6E2C\u8A66\u8CC7\u6599\uFF0C\u6BCF\u7D44\u6E2C\u8A66\u8CC7\u6599\u70BA\u82E5\u5E72\u7BC0\u9EDE\u7684\u96C6\u5408\uFF0C\u5404\u7BC0\u9EDE\u9593\u4EE5 white space (\u7A7A\u767D\u5B57\u5143)\u5206\u9694\uFF0C\u6BCF\u7D44\u6E2C\u8A66\u8CC7\u6599\u6700\u5F8C\u4EE5\u201D()\u201D\u4EE3\u8868\u8A72\u7D44\u6E2C\u8A66\u8CC7\u6599\u7684\u7D50\u675F\u3002\u6B64\u7A0B\u5F0F\u6301\u7E8C\u8F38\u5165\u8CC7\u6599\u76F4\u5230\u6E2C\u8A66\u8CC7\u6599\u4E0D\u5305\u62EC\u4EFB\u4F55\u7BC0\u9EDE\u8CC7\u6599\u70BA\u6B62(\u5373\u53EA\u6709\u201D()\u201D)\u3002\u8ACB\u6839\u64DA\u5404\u7D44\u6E2C\u8A66\u8CC7\u6599\u5224\u65B7\u662F\u5426\u53EF\u4EE5\u69CB\u6210\u4E00\u68F5\u4E8C\u5143\u6A39\uFF0C\u5982\u679C\u8F38\u5165\u7684\u5404\u7D44\u6E2C\u8A66\u8CC7\u6599\u53EF\u4EE5\u69CB\u6210\u4E00\u500B\u4E8C\u5143\u6A39\u7684\u8A71\uFF0C\u8ACB\u8F38\u51FA\u6B64\u4E8C\u5143\u6A39<strong>\u5F8C\u5E8F\u8D70\u8A2A</strong>\u5F8C\u7684\u7D50\u679C\uFF0C\u5982\u679C\u8F38\u5165\u7684\u7BC0\u9EDE\u7121\u6CD5\u5408\u7406\u69CB\u6210\u4E00\u500B\u4E8C\u5143\u6A39\u7684\u8A71\uFF0C\u8ACB\u8F38\u51FA wrong data\u3002</p></blockquote><h3 id="\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-1" tabindex="-1"><a class="header-anchor" href="#\u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B-1" aria-hidden="true">#</a> \u8F38\u5165\u8F38\u51FA\u7BC4\u4F8B</h3><table><thead><tr><th>\u8F38\u5165\u7BC4\u4F8B</th><th>\u8F38\u51FA\u7BC4\u4F8B</th></tr></thead><tbody><tr><td>(11,LL) (7,LLL) (2,LLL) (8,R) (10,R) ()</td><td>wrong data</td></tr><tr><td>(5,) (4,L) (13,LR) (11,LL) (8,R) (4,RL) (7,RR) ()</td><td>11 13 4 4 7 8 5</td></tr><tr><td>()</td><td></td></tr></tbody></table><p>\u6BCF\u500B\u62EC\u865F\u70BA\u4E00\u7BC0\u9EDE\u8CC7\u8A0A\uFF0C\u5373 (\u7BC0\u9EDE\u6578\u503C,\u4F4D\u7F6E)\uFF0C\u4F4D\u7F6E\u4EE5\u6839\u7BC0\u9EDE(root)\u958B\u59CB\u8A08\u7B97\uFF0CR\u70BA\u524D\u5F80\u53F3\u5B50\u7BC0\u9EDE\uFF0CL\u70BA\u524D\u5F80\u5DE6\u5B50\u7BC0\u9EDE</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>LL<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>LLL<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>LLL<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span>LR<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>LL<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>RL<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>RR<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>

wrong data <span class="token comment">// \u7531\u65BC\u8F38\u5165\u8CC7\u6599\u6709\u554F\u984C\uFF0C\u56E0\u6B64\u8F38\u51FA wrong data</span>
<span class="token number">11</span> <span class="token number">13</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="`+p+`" alt="tree"></p></blockquote><h4 id="\u7A0B\u5F0F\u78BC\u7BC4\u4F8B-1" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5F0F\u78BC\u7BC4\u4F8B-1" aria-hidden="true">#</a> \u7A0B\u5F0F\u78BC\u7BC4\u4F8B</h4><details class="custom-container details"><summary>\u5B8C\u6574\u7A0B\u5F0F\u78BC</summary><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">tree</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	tree<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span> right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span>tree<span class="token operator">*</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5F8C\u5E8F\u8D70\u8A2A</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>	
		temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">deleteTree</span><span class="token punctuation">(</span>tree<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">deleteTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">deleteTree</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">delete</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">splitstring</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> sentense<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> tokens<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// \u5206\u5272\u5B57\u4E32</span>
	string<span class="token double-colon punctuation">::</span>size_type pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">;</span>
	pos2 <span class="token operator">=</span> sentense<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pos1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> pos2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pos2 <span class="token operator">!=</span> pos1<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token punctuation">,</span> pos2 <span class="token operator">-</span> pos1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pos1 <span class="token operator">=</span> pos2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		pos2 <span class="token operator">=</span> sentense<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pos1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos1 <span class="token operator">!=</span> sentense<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sentense<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">list</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span> tree<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tree<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">char</span> Dir<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;\\0&quot;</span><span class="token punctuation">;</span>
		<span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;(%d,%[^)]s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

		node <span class="token operator">=</span> root<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Dir<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>Dir<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;L&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>
					node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
				node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>
					node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
				node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>	
		<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>id <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		node<span class="token operator">-&gt;</span>id <span class="token operator">=</span> ID<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		string sentense<span class="token punctuation">;</span>
		<span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> sentense<span class="token punctuation">)</span><span class="token punctuation">;</span>
		vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">tokens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">splitstring</span><span class="token punctuation">(</span>sentense<span class="token punctuation">,</span> tokens<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

		tree<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> tree<span class="token punctuation">;</span>
		<span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

		vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">;</span>
		<span class="token function">getResult</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> <span class="token function">find</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;wrong data&quot;</span><span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

		<span class="token function">deleteTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,18),c=[e];function l(u,i){return s(),a("div",null,c)}var r=n(o,[["render",l],["__file","data-structure.html.vue"]]);export{r as default};
